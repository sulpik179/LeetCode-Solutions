class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen = {}    # словарь с пройденными значениями
        for i, num in enumerate(nums):    # проход пронумерованного списка nums (0: [1] ..)
            complement = target - num    # разность между целью и числом при i
            if complement in seen:    # проверка разницы в seen
                return [seen[complement], i]    # возврат списка (seen[ключ], i)
            seen[num] = i    # присваивание num i


пример:
target = 10, nums = [2, 5, 5, 6]
после enumerate(nums): 0: 2, 1: 5, 2:5, 3:6  (т.е присваивание порядкого номера каждому num)
i            0     1     2     3
num          2     5     5     6
complement   8     5     5     4
seen        2: 0  5: 1  5: 2  6: 3
условию удовлетворяют 5 и 5:

step   i   num

(1)    0   2
complement = 10 - 2 = 8
8 in seen : false 
seen[2] = 0 (seen = {2:0})

(2)    1   5
complement = 10 - 5 = 5
5 in seen : false 
seen[5] = 1 (seen = {2:0, 5:1})

(3)    2   5
complement = 10 - 5 = 5
5 in seen : true => return [seen[5] = 1, i = 2] 

ответ [1, 2]

